CASFMT.TXT (c) 1990-2018 IMSL Software

** Proprietary Version **

This document contains information proprietary to IMSL Software.
It is released to a specific party for a specific purpose under
conditions of confidentiality, and is to be used only for the
intended purpose. This document and the information it contains
must not be disclosed to parties other than the intended recipient.


Also see: SF5X80.TXT and SFAXX.TXT


CASIO DIGITAL DIARY COMMUNICATIONS
__________________________________

The CASIO SF-series pocket Digital Diary, also known as the B.O.S.S.
(Business Online Scheduling System) in the United States can communicate
with a personal computer, allowing it to back-up and restore data
easily, and allowing the PC to be used to maintain the Diary data base.

This document describes the CASIO interface unit and communications
protocol. The communications format used by the Digital Diary is
described in sufficient detail to write a custom communications program
for it on any computer. This information has been derived from and
tested primarily on the SF-7500 and SF-9700 models, including the ES-630
Lucid 3D spreadsheet card. It has been implemented and widely
distributed in the shareware programs CASIF/DOS and CASIF/Win since
1990, accumulating additional user input from newer models such as the
SF-R20 and the SF-7900. It has also been tested with various interface
adaptors such as those from PCLink, Yellow Computing, and various
home-brew versions.


1. CASIO RS232 INTERFACE
------------------------

The CASIO SF-series Digital Diary has a built-in serial interface and
communications program. It can communicate directly with another
SF-series unit, but for standard RS232 it requires an external adaptor
consisting of a level converter and an interface cable.

The CASIO FA-100 or FA-150 package is designed to connect the Digital
Diary to an IBM PC.  The package consists of:

    - An interface box with a 25-pin RS232 jack and a CASIO
      SB-60 (3-pin) jack

    - The SFD interface program on IBM-PC floppy disk (5.25" and
      3.5" formats)

    - Manual (skimpy on technical details)

No provision is made for computers other than IBM PC in the instructions
and the SFD program is PC-specific, but the interface is standard RS232
which should work on any computer serial port. However, the original
version was designed for an EGA rather than a VGA monitor and did not
work with all serial port UARTs. These faults were corrected in the
FA-150 package.

The FA-100 box contains a battery-powered voltage level converter, which
converts between the 6-volt serial I/O of the Digital Diary and the
required minimum 7.5 volt RS232 level.

The I/O jack of the Digital Diary is a standard serial port operating at
low TTL voltage.  The 3 pins are Ground (the tip), Send (middle), and
Receive. The plug size is 2.5mm, but may vary slightly on some later
models, causing a loose plug fit. Also the plug housing is a tight fit
into the opening in side of the diary case with some models, requiring
a plug with an unusually narrow housing. This 2.5mm stereo plug with a
narrow housing can be very difficult to find from electronics suppliers.

The RS232 adaptor cable must connect
the 3 pins to a 25-pin RS232 plug on pins 2,3,7, with CTS/RTS and
DSR/DTR/CD connected as usual for a null modem.  However, TTL to RS232
voltage level conversion is required.  Don't try to connect directly, or
you'll likely blow up the Casio unit.

The RS232 cable required is inadequately specified in the CASIO
FA-100 manual, but it is a standard null modem cable with SND and RCV
crossed.  The FA-100 interface seems to ignore the other pins (as it
should).

CASIO makes a heck of a profit on this relatively simple unit, so it's
not suprising that many others have duplicated it at lower cost:

Travelling Software developed their own FA-120 B.O.S.S. interface
consisting of an RS232-Casio cable with the level converter built in,
and TS's own interface program BOSS, designed to work with Sidekick on
the PC. This package was later updated and sold under the name PCLink by
Casio USA until 1995.

The voltage conversion electronics in the Travelling Software cable are
powered directly from unused serial port pins, removing the need for
batteries. Note that the PCLink cable design was changed in V2.01,
requiring the RTS pin to be in the "off" (negative voltage) state. This
setting is made by the PCLink software, and should be duplicated by any
software intended to use the PCLink cable. Older cables have a silver
tip, while newer ones have a gold tip.

In 1995 Casio USA dropped PCLink and began selling a new Windows-based
package called WinLink (FA-126), developed by Polaris Software based on
their Packrat PIM.  The Casio interface portions of this program are
licensed from Intellilink, a separate software product which supports
many palmtops.	The serial cable in this package is the same as PCLink.
PCLink is still widely available, but the last version (3.5d) does not
support all the more recent Casio models and data types.

In Europe, a software+cable interface package from Yellow Computing is
very popular. Note that this cable requires the RTS pin on the serial
port to be "on" (positive) and the DTR pin to be "off" (negative); this
is the opposite of the PCLink/WinLink cable.

Casio has recently dropped WinLink and gone with a new program from
Yellow Computing for their FA-127 package.

Macintosh interface packages are available from Casio and from 3rd
parties (CasioTalk), but have not been updated in recent years to keep
up with new diary models.


Cheaper alternatives:

Many people have built their own "home-brew" cables, usually based on
the MAX-233 or MAX-232 chip. This single chip handles the voltage
conversion and costs only $7 in single quantities. There are many other
designs, including one which interfaces to the parallel port at TTL
voltage levels instead of using a voltage converter.

Various freeware and shareware programs are available for PCs, Macs, and
Unix machines. The best of these is CASIF/Win (although this opinion may
be a little biased!). Most of the simple programs lack support for all
the variations of Casio models, cables, and data types.

Serial Communications:

The SF-series Digital Diary unit can vary three communications
parameters:  parity (even/odd/none), data bits (7/8), and baud rate
(1200/2400/4800/9600). For maximum speed select none/7/9600, although 8
data bits is more usual. Note that it specifies 2 stop bits, which is
a bit unusual.	The 2 stop bits are required on input to the unit.

Some models (such as the 4300 series) have a slower internal processor
and are limited to 4800 baud.



2. CASIO SF COMMUNICATIONS PROTOCOL
-----------------------------------

The Casio SF-series Digital Diaries use their own unique communications
protocol. It is not compatible with standard terminal programs. You can
Print to any serial ASCII device, but you can only transmit/receive with
another SF-unit or custom program.

The communications sequence between any two SF-series Digital Diaries,
or between an SF-unit and a PC is:


RECEIVER			SENDER
------------------------------- ---------------------------------------

Place unit in receive mode
(waiting for input)

				Send CR-LF pair (ASCII 13, 10),
				repeating until response received
				must be > 10 msec between CR and LF

				If no response after 15 CR-LF pairs,
				send " (ASCII 34) to abort transmission
				and quit

Respond  (ASCII 17/Ctrl-Q/XON)
to indicate Ready after
receiving a CR-LF pair

				Send item type identification field

May send # (ASCII 35)

				Send a series of entry fields making up
				one complete item record of the
				specified type

May send  (ASCII 19/Ctrl-S/
XOFF) to request a temporary
halt (too much data too fast
for it)

				Wait for XON before continuing

Sends XON (ASCII 17) when ready
to continue after XOFF

Diary may send multiple XOFFs
if the receiver does not stop
quickly enough

Diary may send "?" for error
retry after XOFF and without
sending XON

				Send record terminating field

				Wait for # acknowledgement


Respond # (ASCII 35) to indicate
"Received OK, continue" after
receiving the last character of
the record terminating field

or

May send ? (ASCII 63)
at any point
[or $ (ASCII 36)]?
to indicate error in
current record
                                If error retry requested:
				Go back to start of record and then
				re-synchronize by waiting for CR-LF
                                pair, respond XON, send data type again,
                                send record again

				Continue with next item record (if any)

Respond with # after each	...
record

...

Send " (ASCII 34) at any time
to abort transmission

				Send end-of-transmission field after
				last item record

				 or

				Send ! (ASCII 33) to stop transmission

Stop receiving.

------------------------------- ---------------------------------------


There are a few important quirks:

  - more than one XOFF in a row may be sent by the Digital Diary after
    it has been sent a long record at too high a speed; transmission
    speed should be throttled back if this occurs (see below); in any
    case, don't depend on a one-to-one pairing of XOFF with XON

    N.B. - the Digital Diary sends XOFF when its buffer space is
    down to 48 characters, 16 characters, and 8 characters - even if it
    has already sent XOFF

  - the "#" response to the end of a record may occur after XOFF and
    without an XON

  - the SF-9700 responds with "#" after receiving a type-identification
    field; the SF-7500 did not do this, and this response to a
    type-identification field does not seem to be required when the
    SF-9700 is transmitting

No count of the number of records or entry fields per record to be sent
is given ahead of time.  The end of an item record is recognized by the
terminating field.  The end of a multi-record transmission is marked by
an additional special terminating field.  Prior to the final terminating
field of a multi-record transmission there is no indication if more
records will follow:  the receiver must keep receiving until either the
final terminating field is received, or a stop character (!) is
received. The receiver is supposed to time out after a few minutes with
no data received.

All data fields are sent as ASCII hex digit characters (0-9, A-F), with
2 sequential ASCII hex digits corresponding the hex value of each data
byte. For example, an ASCII "A" data character is sent as the two ASCII
characters "41". CASIO probably chose to do it this way to allow for
7-bit ASCII format, but it takes twice as long to transmit as the actual
8-bit data byte values. In fact, the transmission format is very
inefficient in several other aspects as well:  redundant offset and
field separator values, a lengthy record terminator which could be a
single character, etc.


Transmission Speed Limits:

When the Digital Diary is sending a series of items it is common for
there to be delays of up to 1/2 second between data items while the unit
searches its memory for the next item to transmit. It is also common for
there to be an "XOFF" followed by a delay of up to 1/2 second after the
unit has received a lengthy item. The 9000 series seems faster than the
7000 series in this respect, but unknown if it is related to model
number or rather to a convoluted memory structure caused by adding and
deleting items many times on a well-used unit.

The Digital Diary has problems accepting input data at too high a rate
in spite of the XOFF/XON protocol.  Long text data records at 9600 baud
are a particular problem, resulting in the multiple XOFF symptom
described above, or a "?" response indicating an error in reception.
The problem grows worse as the memory fills up on some models,
resulting in more errors.

Transmission speed should be throttled back at 9600 baud by allowing at
least 1.0 msec. between characters.  This does not slow down the
overall rate of data acceptance by the Digital Diary; there is normally
a long pause initiated by XOFF after receiving a record, and the pause
is proportionately reduced if the transmission speed is throttled back.
This may be because Casio uses the microprocessor in the Diary to
emulate a serial port UART by directly "polling" the serial input bit,
and it simply isn't fast enough to keep up (just a guess).

The order of fields in transmission is the same as they appear during
data entry on the Digital Diary, i.e.

Tel:		Name, Telephone no., Address, Free1, ..., Free6
		(up to 6 free fields)

BCard:		Company, Name, Telephone no., Position, Dept., P.O. Box,
		Address, Telex, Fax, Free1, ..., Free6
		(up to 6 free fields)

Memo:		Text

Sched:		Date, [Time,] [Alarm time,] Item

Calendar:	Monthdate, Highlights

ToDo:		[Date,] [Time,] Description

Expense:	Date, Amount, Payment type, Expense type, Receipt (Y/N)
		Business (Y/N), Description

There are some data types which add extra internal fields when
tranmsitted:

Free File:	New/Repeat flag, File name, End, text, End, ... text,
		End, EOF

Sketch: 	File number, DIB

There are also extra fields added to the basic types by later models,
particularly the CSF and NX series which add fields for colours and
icons. In general these extra fields do not affect the basic data type.


Record Format:

Casio has a very complex explanation for their data transmission format,
but many of the options are seldom or never used, and the terminology is
obscure. The following explanation does not use Casio's terminology or
go into unnecessary detail (e.g. Casio takes 6 pages of broken English
and complex diagrams to explain what happens if a communications error
occurs while transmitting a Free File on the SF-R20 - this event is so
rare that it is unlikely anyone would bother implementing their
procedure when a simple retry by the user will correct it).

The general field format for all fields in a record is:

	:llffoottdd...ddcc

where:

	:	- Field always begins with leading colon

	ll	- 2 digit (1-byte) field data length, number of bytes
		  of data (dd) in field, not counting llffoott and cc

		  Maximum value is 80 hex (128)

		  Zero length always indicates a record terminating
		  field

	ff	- Field data type:

			0x - type identification field or
			     record terminating field
			8x - text data field or MARK terminating field
			Cx - schedule alarm field
			Dx - calendar field
			Ex - time field
			Fx - date field

			9x - free file name (SF-R/M series only)
			7x - other data (SF-R/M series and NX/CSF series)
			     70 = free file new/repeat flag
			     71 = color data (R/G/B)
			     72 = ToDo priority A/B/C
			     78 = calendar colours
			2x - other data (NX series, CSF series)
			     21 = icon number
			     22 = sketch notebook number (NX series only)
			4x - sketch data (NX series only)

		  The low digit is used as a bit flag on later series,
		  for various sub-codes as noted.

		- Low digit of flag byte should be masked to 0 when
		  read to mask out offset bit

	oo	- Low byte of data offset (bits 0-7)

		  High bit of data offset (bit 8) is in low bit of flag
		  byte

	tt	- Field type, 02 for type identification field,
			    01 for record terminator field,
			    FF for transmission terminator field,
			    00 for all data fields

	dd	- One or more data bytes (counted in length field)

	...

	cc	- Checksum


The length is the number of bytes in the data part of the field, not
counting the length byte itself, flag, offset, sub-type, or checksum.
Remember, there are two ASCII digits per byte.	The length is not
allowed to exceed 80 hex (128) in CASIO's transmission protocol; longer
fields are broken up into multiple sequential fields for transmission.
The end of such a field can be recognized only by the presence of the
field terminating character 0A (LineFeed) as the last data byte.

The checksum is the simple running checksum of all bytes in the record,
beginning with and including the length byte, continuing to and
including the checksum byte itself.  The total of all bytes (including
the checksum itself) must be 00 in the low 2 hex digits, where the
checksum byte value is adjusted to make this true.  A checksum error
indicates a faulty transmission.

The field data type ff indicates the type of data in the field,
with the field type byte tt indicating special field types in some
cases.


TYPE IDENTIFICATION FIELD

A transmission always begins with a type identification field,
indicating what type of item data follows (i.e. memo, bus.card,
telephone, schedule, or calendar).  The field data type in this
case is 00, the "offset" is always 00 and the field type byte is 02.
The data type to follow is determined from the first data byte value:

	80	- calendar
	90	- telephone
	A0	- memo
	B0	- schedule
	C0	- business card (some models)
	C1	- todo list (later models)
	91	- reminder (later models)
	A1	- reminder 2 (SF-R/M series only)
	92	- expense (later models)
	B1	- free file (SF-R/M series only)
	A2	- sketch data (NX series)

There is always a second data byte of 00, and there is no other data in
the record, so the field data length is always 02.

Eastern European SF models (ending in letter code "Z", such as the SF-4985Z)
have the 4 bit set in the data type (e.g. telephone type id is 94h) - at least
for the Czech language - other language options on these models might be 
different.

Russian models with 2-byte (Unicode?) character set also use different type
codes (see below).

Example of type identification field:

	:02000002A0005C
	  ||   | |  |
	  ||   | |  checksum 02+00+00+02+A0+00+5C = x00
	  ||   | |
	  ||   | type A0 is memo
	  ||   |
	  ||   field type 02 indicates type identification field
	  ||
	  |field data type always 00
	  |
	  data length always 02 (the 2 bytes A000 in this record)

The type identification field is sent only prior to the first item of
each type; it not repeated prior to each item in a multi-item
transmission.  When transmitting "all" data, a type identification field
is sent prior to the start of the items of each type. When an error
re-transmission occurs, it always begins with the synchronization
sequence (CR-LF), then the current type identification field before the
actual data record is re-transmitted.


DATA FIELDS

The type identification field is followed by a set of item records.
Each item record is made up of a number of data fields.  The data field
format depends on the type of data it contains rather than the item
type.

Text data fields always have a field data type of 8xh.

Example of text data field "1234":

	:0480000031323334B2
	  || |	 |	 |
	  || |	 |	 checksum 04+80+00+00+31+32+33+34+B2 = x00
	  || |	 |
	  || |	 data bytes for entry field "1234"
	  || |
	  || offset is 0 for first entry
	  ||
	  |field data type 80 indicates text data field
	  |
	  field length is 4 data bytes

The offset is cumulative.  The first text data field of a record always
begins at offset zero, the 2nd at 0 + the length of the 1st field, the
3rd at the offset of the 2nd field plus the length of the 2nd field,
etc.  Note that if (and only if) there is a following data field in the
record, a field separator character (0A = LineFeed) is added to the end
of the field data.  The field separator is counted in the length byte
and the subsequent offsets.

Memo, telephone, and business card item records consist of one or more
text fields.  A missing/empty data entry which is sequence-dependent
(i.e. like those in a telephone or business card item record) is marked
by a text field containing only a separator character 0A.

As noted above, text fields longer than 128 bytes are broken up into
multiple fields for transmission.  Only the last has a trailing field
separator.

If an entry contains one or more Carriage Return (CR) characters in the
text, it is broken into separate fields ending at the CR for
transmission.  When a CR is received as the last character in a field,
the next text data field should be appended to it rather than beginning
a new text field of the item record.  There is no field separator 0A in
this case.


Date/time fields:

Date fields have a field data type of Fxh. The date field appears as the
first field when a schedule, calendar, reminder, or ToDo item is
transmitted.  For a schedule item it is followed (optionally) by time
field(s) and a text data field for the schedule entry.


Schedule item transmission sequence:

	Date field
	(Time field - optional)
	(Alarm time field - optional)
	Text data field for schedule item

The time field, if present, identifies the start time of the schedule
item, and may also identify an end time for the schedule item.	The
alarm time field, if present, specifies the time of the associated
schedule alarm.

When multiple schedule items for a single day are transmitted, each item
is transmitted seperately beginning with a date field.


Date field format:

	:0AFx0000yyyyyyyy2Dmmmm2Dddddcc
		 |	 | |   | |
		 |	 | |   | day (01-1F)
		 |	 | |   |
		 |	 | |   dash (-)
		 |	 | |
		 |	 | month (01-0C)
		 |	 |
		 |	 dash (-)
		 |
		 year (19xx or 20xx)


Time field format:

	:05Ex0000hhhh3Ammmmmcc
		 |   | |
		 |   | minute (00-3B)
		 |   |
		 |   colon :
		 |
		 hour (01-18)

For a schedule appointment with time duration specified (start and end
times):

	:0BEx0000hhhh3Ammmmm7Ehhhh3Ammmmcc
		 |	     ||
		 |	     |end time (hh:mm)
		 |	     |
		 |	     separator character ~
		 |
		 start time (hh:mm)


The hour is always in 24-hour format.

A schedule alarm time field is identical in format except that the field
data type is Cxh instead of Exh.  Note that the Digital Diary does not
allow two schedule items to have the same alarm time - it will not store
a second item with the same alarm time as an existing item.

The SF-M10/R10/R20 series allow alarms to be set for a specific time
zone. For these models only, the alarm time field may have a length of
10 characters instead of 5, including an ASCII encoded 5-character suffix
of "-nnnn", where nnnn is the 4-digit city number for which the
alarm is set in Casio's standard built-in city list (groan!). New York is
0195, for example.

The CSF-series diaries allow an icon to be specified for schedule items.


Term schedule items (SF-9000 series):

A term schedule item includes both a start date and an end date in a
longer schedule field of the following format:

	:15Fx0000yyyyyyyy2Dmmmm2Ddddd7Eyyyyyyyy2Dmmmm2Dddddcc
		 |	 | |   | |   | |       | |   | |
		 |	 | |   | |   | |       | |   | end day (01-1F)
		 |	 | |   | |   | |       | |   |
		 |	 | |   | |   | |       | |   dash (-)
		 |	 | |   | |   | |       | |
		 |	 | |   | |   | |       | end month (01-0C)
		 |	 | |   | |   | |       |
		 |	 | |   | |   | |       dash (-)
		 |	 | |   | |   | |
		 |	 | |   | |   | end year (19xx or 20xx)
		 |	 | |   | |   |
		 |	 | |   | |   separator character ~
		 |	 | |   | |
		 |	 | |   | start day (01-1F)
		 |	 | |   |
		 |	 | |   dash (-)
		 |	 | |
		 |	 | start month (01-0C)
		 |	 |
		 |	 dash (-)
		 |
		 start year (19xx or 20xx)

Term schedule items were added to the SF-9000 series and SF-R/M series,
but are not available on later models.


Schedule Sketch records (NX series):

The NX series have a Schedule Sketch variation of the regular
Schedule data type which consists of a date field followed by a Sketch
bitmap (see below). No times allowed.


Reminders Type 1 (SF-5300 and later):

Reminder items on the SF-5300 begin with a type identification field
with a type value of 91h. Each reminder item consists of:

	A date field
	An alarm time field (optional)
	A text field
	A record terminator field

The reminder date field always has 2D2D2D2D (4 dashes) instead of a year
for annual reminders, and may also have 2D2D (2 dashes) instead of a
month for monthly reminders, and 2D2D (2 dashes) instead of a day for
daily reminders. Not all models support Monthly and Daily reminders.

There cannot be a regular time field - only an alarm time field.

On the NX series, an icon field of sub-type 21 may appear immediately
after the date field.

This type of reminder is the only type available on most models.


Reminder 2 items (SF-M10/R10/R20 only):

Reminder 2 items are transmitted as a separate data type A1h.

Reminder 2 items have an extended date field which allows two additional
options:

	A day of the week (1=Sunday through 7=Saturday)
	A week number (two digits, 01-05)

This allows reminders to be specified to repeat on a particular day of
the week, and (optionally) a particular week of the month.  A particular
month can also be specified if applicable.

The extended date field format is:

	-----mm----ww-d


Calendar fields:

A calendar month item is transmitted as a date field identifying the
year and month (day of month always = 01), followed by a calendar
highlight field which identifies the highlighted days in that month.
Associated schedule items are transmitted separately.

Calendar item transmission sequence:

	Date field (day=01)
	Calendar highlight field


The highlighted days are identified by the setting of individual bits in
a string of 32 bits (8 hex digits).  A bit set indicates a highlighted
day.  The bits are ordered right-to-left, with bit 0 of the rightmost
(last) digit representing day 1 of the month, and bit 6 of the leftmost
(first) digit representing day 31 of the month.

Calendar highlight field format:

	:04Dx0000hhhhhhhhcc
		 |
		 32 highlight bits


On the NX and CSF series, an extra calendar colour field containing a
byte value per day appears following the standard Calendar highlight
field.	It has a field length of 20h (i.e. 1 byte per day + an extra
redundant byte = 32) and a field data type of 78h (N.B.  Casio's
documentation says that the field data type should be D1h, corresponding
to the regular calendar field data type of D0h, but their document seems
to be wrong!).

The 32 bytes in the calendar colour field are in reverse order from day
32 (always 0) to day 1. In each byte, the bits are:
	bit 0 - Blue
	bit 1 - Orange
	bit 2 - Green
	bits 3-6 - ignored
	bit 7 - highlight

If more than one colour bit is on, the colour is to be taken as Blue.
Since the calendar colour field contains the highlight bit, the regular
calendar data field (always sent as well for compatibility) is redundant
and can be ignored.


Expense fields (SF-5300B, SF-7900 etc):

	Date (single text field)
	Amount (single text field)
	Form of Payment (single text field)
	Category (single text field)
	Receipt (Y or empty text field)
	Business (Y or empty text field)
	Expense description (single text field)

Note that the Date field for expense items is a text field, in a
different format from the Date field used for other items (why Casio?):

	yyyyddmm

with no separators, and with a leading blank before single-digit months
and days. Also, note that the Receipt and Business fields are always present
when transmitting, but are unused and unsupported in expense items on the
SF-5300B/5500B.


Free files (SF-M10/R10/R20 only):

A free file item consists of:

	A free file start field (data type 70h, format usually
	:017000018E), data byte may be 02 instead of 01 to indicate
	a retransmit of a file previously interrupted by an error

	A file name field (data type 90h, same format as text field type
	80)

	End of record field

	One or more text fields containing file data up to 384 char
	End of record field

	More text fields up to another 384 char
	End of record field
	...

	An end-of-file text field containing the single character 1A
	End of record field

Note that an item of this data type is unusual in that it consists not
of just one record, but a list of records each ending with an
End-of-record field.


ToDo List (SF-M10/R10/R20)

The ToDo list consists of a simple list of text items equivalent to memo
fields following the ToDo type identification field.  The ToDo item text
field may be preceeded by a date field and optionally a time field to
indicate that it was completed at the specified time on the specified
date.

If the Date field begins with "-", it means that the item was checked
off as Done without a date, and there can be no time field.

ToDo List (NX-series and CSF-series)

On the NX/CSF series, fields of sub-type 21 (icon number 0-255) and 72
(priority A/B/C) may appear between the date field and the item text
field. Both have a record length of 01.
Icon number is a single byte numeric value 0-255. Priority is a hex
byte value, one of 10 = A, 20 = B, or 30 = C.
Examples:

	:0121000003DB	- icon 3
	:01720000206D	- priority B

In addition, the ToDo data type has separate fields for Due
date/time/alarm following Done date/time. These fields have the same
format as the regular date/time/alarm fields, but with the 4 bit set
in the field type byte (F4/E4/C4).

Examples:

:0AF40000313939372D30322D32300A  - Due date
:05E4000032323A303712		 - Due time


Sketch Data (NX-6000):

Sketch data is transmitted in Microsoft DIB (BMP) bitmap format, and can
be read directly by any program which understands DIB/BMP format. The
DIB characteristics are: 1 plane, 16 colors (4 bits/pixel),
uncompressed, solid colors only in the color table (RGB).

The sketch data is preceded by the Sketch data type record (type 2A),
then optionally by a sketch number field:

	02220000nn00cc

where nn = 0 - FF.

The DIB file is transmitted in records of type 40h:

	ll40ss0000dddd...ddcc

where ll is the record length, ss is a sequence number starting at 00,
dd is the DIB data, cc is the record checksum. The file header, bitmap
info header, and color table are transmitted as the first 3 records. The
bitmap rows are transmitted in records of as many lines as will fit in
a record of maximum length 80h.  The line records are all the same
length, normally 70 pixels.


Other Notes on Color Models NX, CSF:

- These models may have only a single Free Field (Notes)?
- These models may have multiple Memo sections (Personal Business)?


TERMINATOR FIELDS

A complete item record, consisting of one or more data entries, is
always terminated by a terminator field which has a field length of 00,
a field data type of 00, an "offset" value of 00, and a field type
byte of 01.

Record terminator field:

	:00000001FF	- end of record

A different record terminator field is sent at the end of a "marked"
item:

	:008000017F	- end of marked record

Following the record terminator field of the last item record in a
multi-item transmission, a transmission terminator record is added. This
is similar in format to the record terminator field, but with a field
type byte of FF instead of 01.

Transmission terminator field:

	:000000FF01	- end of multi-item transmission


SAMPLE PROGRAM

The following is a sample Microsoft BASIC program for receiving from the
Digital Diary and printing the characters received in hex digit form:


10 OPEN "com1:1200,N,8,1,CS0,DS0" AS 1
20 IF INPUT$(1,1)<>CHR$(13) THEN 20
30 IF INPUT$(1,1)<>CHR$(10) THEN 20
40 PRINT #1,CHR$(17);
50 A$=INPUT$(1,1)
60 PRINT A$;
70 IF A$="F" THEN X=X+1 : ELSE X=0  'not formally correct, but simple
80 IF X=2 THEN X=0 : BEEP : PRINT#1,"#";
90 GOTO 50

Note: BASIC is speed-limited on slower PCs. Interpreted BASIC can only
handle 1200 baud on a PC/AT. Compiled BASIC can handle 9600 baud on a
PC/AT, but only 4800 baud on an XT.



SF-4900RS Russian Language Model
--------------------------------

The Function menu "Data comm" has the following menu items:

1 TO SAME MODEL
2 TO OTHER MODEL
....


From the "Owner's Manual" about data compatibility

        "The CASIO SF-4600RS and SF-4900RS are text data
        compatible. This means that all characters can be exchanged
        between these two models.
        When you send data from this unit to another model that
        does not support the characters (such as Cyrillic
        characters) or symbols used by this unit, the unsupported
        characters are replaced with spaces by the unit you are
        sending to."

When you select To Other Model, the Russian characters are replaced by
blanks.

When you select To Same Model, the standard data types are replaced by
the following special data types in the Type Identification Field:

        90      - telephone     becomes 07
        A0      - memo          becomes 17
        B0      - schedule      becomes 47
        91      - reminder      becomes 18

The 2nd byte of the Type Identification Field is 10 instead of 00 for
all of these data types.

The text fields in the data records following each of these data types
has the field type 00 instead of 80 (0x instead of 8x actually), and
each character is represented by two bytes instead of one:

        first byte:     00 (Latin character set) or 10 (Russian)
        2nd byte:       cc character code:
                           00-7F are ASCII-equivalent (00) codes
                           80-FF are Russian (10) codes

The field length counts both bytes as separate characters.
The field still breaks at length 80h, just like a standard text field.
A field-terminating linefeed character appears as 00 0A.

Unfortunately there are overlapping value ranges in the 2nd byte for
Russian characters and Casio symbols (e.g. 00 F6 is a valid symbol
character and 10 F6 is a valid Russian character), so there are more
than 256 possible character values to handle.

The other non-text field types appear to be standard for Russian data
types.

Unknown if this information applies to any earlier Russian models.
